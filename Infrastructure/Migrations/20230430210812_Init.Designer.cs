// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230430210812_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c77e3e74-22ff-4032-aa44-716ca223f7bf"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Car"
                        },
                        new
                        {
                            Id = new Guid("aa78790e-9d22-4243-a735-f96ac103d491"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "House"
                        });
                });

            modelBuilder.Entity("Domain.CustomFields.CustomField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CustomField");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d84ec479-b38d-433f-ba57-2d3d2e4a3b29"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2023, 4, 30, 21, 8, 12, 471, DateTimeKind.Utc).AddTicks(1257),
                            Name = "House Fields"
                        },
                        new
                        {
                            Id = new Guid("d84ec479-b38d-433f-ba57-2d3d2e4a3b91"),
                            CreatedBy = "System",
                            CreatedOnUtc = new DateTime(2023, 4, 30, 21, 8, 12, 471, DateTimeKind.Utc).AddTicks(1267),
                            Name = "Engine specs"
                        });
                });

            modelBuilder.Entity("Domain.CustomFields.CustomFieldKey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldId");

                    b.ToTable("CustomFieldKey");

                    b.HasData(
                        new
                        {
                            Id = new Guid("991cd085-9877-493c-838b-31689d030a84"),
                            CustomFieldId = new Guid("d84ec479-b38d-433f-ba57-2d3d2e4a3b91"),
                            Key = "engine size"
                        },
                        new
                        {
                            Id = new Guid("991cd085-9877-493c-838b-31689d030a86"),
                            CustomFieldId = new Guid("d84ec479-b38d-433f-ba57-2d3d2e4a3b91"),
                            Key = "engine type"
                        },
                        new
                        {
                            Id = new Guid("991cd085-9877-493c-838b-31689d030a87"),
                            CustomFieldId = new Guid("d84ec479-b38d-433f-ba57-2d3d2e4a3b29"),
                            Key = "Type"
                        });
                });

            modelBuilder.Entity("Domain.CustomFields.CustomFieldValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomFieldKeyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProducId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomFieldKeyId");

                    b.HasIndex("ProducId");

                    b.ToTable("CustomFieldValue");
                });

            modelBuilder.Entity("Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationInDays")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartAppearingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdateOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.Products.ProductTranslation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoreId");

                    b.ToTable("ProductTranslation");
                });

            modelBuilder.Entity("Domain.CustomFields.CustomFieldKey", b =>
                {
                    b.HasOne("Domain.CustomFields.CustomField", "CustomField")
                        .WithMany("CustomFieldKeys")
                        .HasForeignKey("CustomFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomField");
                });

            modelBuilder.Entity("Domain.CustomFields.CustomFieldValue", b =>
                {
                    b.HasOne("Domain.CustomFields.CustomFieldKey", "CustomFieldKey")
                        .WithMany()
                        .HasForeignKey("CustomFieldKeyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Products.Product", "Product")
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("ProducId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomFieldKey");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Domain.Products.Product", b =>
                {
                    b.HasOne("Domain.Categories.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Products.ProductTranslation", b =>
                {
                    b.HasOne("Domain.Products.Product", "Core")
                        .WithMany("Translations")
                        .HasForeignKey("CoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Core");
                });

            modelBuilder.Entity("Domain.Categories.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.CustomFields.CustomField", b =>
                {
                    b.Navigation("CustomFieldKeys");
                });

            modelBuilder.Entity("Domain.Products.Product", b =>
                {
                    b.Navigation("CustomFieldValues");

                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
